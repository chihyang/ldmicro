
介绍
====

LDmicro为一些PIC16微型芯片和Atmel AVR微型控制器生成本地代码。通常用于这些
微型芯片的软件是由汇编、C或BASIC语言编写的。由这些语言编写的程序包含一系列
语句。这些语言功能强大，完美适应处理器结构，处理器在内部执行一系列指令。

另一方面，PLC常用“梯形图逻辑”编程。一个简单的程序看起来像这样：

   ||                                                                    ||
   ||    Xbutton1           Tdon           Rchatter           Yred       ||
 1 ||-------]/[---------[TON 1.000 s]-+-------]/[--------------( )-------||
   ||                                 |                                  ||
   ||    Xbutton2           Tdof      |                                  ||
   ||-------]/[---------[TOF 2.000 s]-+                                  ||
   ||                                                                    ||
   ||                                                                    ||
   ||                                                                    ||
   ||    Rchatter            Ton             Tnew           Rchatter     ||
 2 ||-------]/[---------[TON 1.000 s]----[TOF 1.000 s]---------( )-------||
   ||                                                                    ||
   ||                                                                    ||
   ||                                                                    ||
   ||------[END]---------------------------------------------------------||
   ||                                                                    ||
   ||                                                                    ||

(TON是一个接通延时；TOF是一个关断延时；--] [--语句是输入，其行为类似于继电器
触点。--( )--语句是输出，其行为类似于继电器线圈。因特网及其他地方有许多关于梯
形图逻辑的不错的参考资料；对此配置的详细说明见下。)

一些区别是显而易见的：

	* 程序表现为图形形式，而不是语句的文本列表。很多人都觉得这一开始就更易理
	解。
	
	* 在最基本的层面上，程序看起来像含有继电器触点(输入)和线圈(输出)的电路图。
	这对具有电路理论知识的编程者来说十分直观。
	
	* 梯形图逻辑编译器负责决定要在哪里进行何种计算。你不必编写代码以确定何时输
	出需要根据输入变化或定时器事件重新计算，你也不必指定这些计算进行的顺序；PLC
	工具为你完成它们。
	
LDmicro将梯形图编译为PIC16或AVR芯片代码。它支持下列处理器：
	* PIC16F877
	* PIC16F628
	* PIC16F876 (未测试)
	* PIC16F88 (未测试)
	* PIC16F819 (未测试)
	* PIC16F887 (未测试)
	* PIC16F886 (未测试)
	* ATmega128
	* ATmega64
	* ATmega162 (未测试)
	* ATmega32 (未测试)
	* ATmega16 (未测试)
	* ATmega8 (未测试)

要支持更多AVR或者PIC16芯片很容易，但我无法对它们进行测试。如果你对某一款有特殊
需要请联系我，我会看看自己能做些什么。

使用LDmicro，你可以为你的程序画梯形图。你可以在计算机上实时模拟逻辑过程，确信
程序编写无误，将微型控制器的引脚安排为程序的输入输出。编译器输出是一个.hex文件，
你可以使用任何PIC/AVR编程工具将其写入微型控制器中。

LDmicro被设计为类似大多数商业化的PLC编程系统。而许多方面并非工业标准，有一些例
外。仔细阅读每个指令的描述，即使它看起来很熟悉。这份文档假设你有关于梯形图和
PLC软件的基本知识(执行循环：读取输入，计算，写输出)。   

其他目标
========

LDmicro也可以生成ANSI C代码。你可以将其用于任何可用C编译器的处理器，但你得负责提
供运行平台。这意味着LDmicro只生成一个函数PlcCycle()的源代码。你负责安排每个循环对
PlcCycle的调用和PlcCycle调用的I/O(读/写数字输入等)函数。

最后，LDmicro可以为运行梯形图的虚拟机生成独立于处理器的字节码。我已经提供了一个简
单的解释器/虚拟机配置实例，它是用移植性良好C语言编写的。只要你能提供自己的虚拟机，
这一目标适用于任何平台。如果你需要使用梯形图作为更大程序的“描述性语言”，这可能很
有用。请查看示例解释器中的注释获得更多细节。

命令行选项
==========

ldmicro.exe通常不带命令行选项运行。这意味着你可以为程序创建一个快捷方式，或者把它
保存到你的桌面并在需要时运行，然后从GUI中进行每一件工作。

如果在命令行中给LDmicro传递一个文件名(如，'ldmicro.exe asd.ld')，那么当'asd.ld'存
在时，LDmicro将尝试打开它。这意味着你可以将ldmicro.exe和.ld文件关联，这样你双击.ld
文件时，它会自动运行。

如果给LDmicro传递形如'ldmicro.exe /c src.ld dest.hex'的命令行参数，它会尝试编译
'src.ld'并将输出保存为`dest.hex'。LDmicro在编译后退出，不论编译成功与否。任何消
息都会列印到控制台中。这个模式在通过命令行运行LDmicro时才有效。

基础
====

如果不带参数地运行LDmicro它会以一段空程序启动。如果在命令行中带一个梯形图文件名
(xxx.ld)运行LDmicro，它会在启动时加载那个程序。LDmicro为程序使用它的内部格式；
它无法从任何其他工具输入梯形图。

如果